{"version":3,"file":"static/js/186.f61eba20.chunk.js","mappings":"mPAyDA,UAnDgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAkCN,EAAAA,EAAAA,WAAS,GAA3C,eAAOO,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WACHN,GAILO,EAAgBP,EAAS,UAC1B,GAAE,CAACA,IAEJ,IAAMO,EAAe,mCAAG,WAAOC,EAAIC,GAAX,8EACtBJ,GAAa,GADS,kBAGOK,EAAAA,GAAoBF,EAAIC,GAH/B,UAIgB,KAD9BE,EAHc,QAIHC,QAAQC,OAJL,yCAKXC,EAAAA,GAAAA,MAAY,8CALD,OAQpBf,EAAWY,EAAaC,SARJ,kDAUpBT,EAAS,EAAD,IAVY,yBAYpBE,GAAa,GAZO,6EAAH,wDAgBrB,OACE,2BACGP,IACC,wBACGA,EAAQiB,KAAI,gBAAGP,EAAH,EAAGA,GAAIQ,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,wBAAKD,KACL,uBAAIC,MAFGT,EADE,MAQhBJ,IAAa,SAAC,IAAD,IACbF,GACCY,EAAAA,GAAAA,MACE,mFAIT,C,2KCrDKI,EAAW,gCACXC,EAAM,mCAECC,EAAiB,mCAAG,oGACRC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBC,IAFZ,cACzBG,EADyB,yBAKxBA,EAASC,MALe,2CAAH,qDAQjBC,EAAgB,mCAAG,WAAMC,GAAN,uFACPJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,kBAC2BM,IAFpB,cACxBH,EADwB,yBAKvBA,EAASC,MALc,2CAAH,sDAQhBG,EAAY,mCAAG,WAAMlB,GAAN,uFACHa,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BV,EAA9B,oBAA4CW,IADzC,cACpBG,EADoB,yBAGnBA,EAASC,MAHU,2CAAH,sDAMZI,EAAe,mCAAG,WAAOnB,EAAIC,GAAX,uFACNY,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDV,EADC,YACKC,EADL,oBACuBU,IAFjB,cACvBG,EADuB,yBAKtBA,EAASC,MALa,2CAAH,uD","sources":["components/Reviews/Reviews.jsx","services/ApiService.js"],"sourcesContent":["import { toast } from 'react-toastify';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from 'services/ApiService';\nimport Loader from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const { movieId } = useParams();\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    getMovieReviews(movieId, 'reviews');\n  }, [movieId]);\n\n  const getMovieReviews = async (id, option) => {\n    setIsLoading(true);\n    try {\n      const movieReviews = await API.getMovieSubInfo(id, option);\n      if (movieReviews.results.length === 0) {\n        return toast.error('We don`t have any reviews for this movies');\n      }\n\n      setReviews(movieReviews.results);\n    } catch (error) {\n      setError(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      {reviews && (\n        <ul>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h4>{author}</h4>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {isLoading && <Loader />}\n      {error &&\n        toast.error(\n          'Oops, an error occurred while loading the page. Please try reloading the page'\n        )}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'f2fae09050301062329c7f99a1fba61d';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${KEY}`\n  );\n\n  return response.data;\n};\n\nexport const getMoviesByQuery = async query => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${query}`\n  );\n\n  return response.data;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const getMovieSubInfo = async (id, option) => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/${option}?api_key=${KEY}`\n  );\n\n  return response.data;\n};\n"],"names":["useState","reviews","setReviews","movieId","useParams","error","setError","isLoading","setIsLoading","useEffect","getMovieReviews","id","option","API","movieReviews","results","length","toast","map","author","content","BASE_URL","KEY","getTrendingMovies","axios","response","data","getMoviesByQuery","query","getMovieById","getMovieSubInfo"],"sourceRoot":""}