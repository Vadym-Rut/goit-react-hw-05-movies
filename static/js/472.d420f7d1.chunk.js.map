{"version":3,"file":"static/js/472.d420f7d1.chunk.js","mappings":"wNAEaA,EAAYC,EAAAA,EAAAA,GAAH,oJAQTC,EAAeD,EAAAA,EAAAA,GAAH,2VAqBZE,EAAYF,EAAAA,EAAAA,GAAH,iG,qECAtB,EA1BoB,SAAC,GAAgB,IAAdG,EAAa,EAAbA,OACfC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACN,EAAD,UACGI,EAAOG,KAAI,YAAmD,IAAhDC,EAA+C,EAA/CA,GAAIC,EAA2C,EAA3CA,eAAgBC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cACxC,OACE,SAACT,EAAD,WACE,UAAC,KAAD,CAAMU,GAAE,kBAAaJ,GAAMK,MAAO,CAAEC,KAAMT,GAA1C,WACE,gBACEU,IACEJ,EAAa,0CAC0BA,GACnCK,EAENC,IAAKR,GAAkBC,KAEzB,SAACP,EAAD,UAAYM,GAAkBC,QAVfF,EActB,KAGN,C,oICiBD,UAxCa,WACX,OAA4BU,EAAAA,EAAAA,UAAS,MAArC,eAAOd,EAAP,KAAee,EAAf,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WACRC,GACD,GAAE,IAEH,IAAMA,EAAS,mCAAG,2FAChBF,GAAa,GADG,kBAGWG,EAAAA,KAHX,UAIoB,KAD5BC,EAHQ,QAICC,QAAQC,OAJT,yCAKLC,EAAAA,GAAAA,MACL,6EANU,OAUdX,EAAUQ,EAAWC,SAVP,kDAYdP,EAAS,EAAD,IAZM,yBAcdE,GAAa,GAdC,6EAAH,qDAkBf,OACE,6BACE,2CACCnB,IAAU,SAAC,IAAD,CAAYA,OAAQA,IAC9BkB,IAAa,SAAC,IAAD,IACbF,GACCU,EAAAA,GAAAA,MACE,mFAIT,C,2KC1CKC,EAAW,gCACXC,EAAM,mCAECC,EAAiB,mCAAG,oGACRC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBC,IAFZ,cACzBG,EADyB,yBAKxBA,EAASC,MALe,2CAAH,qDAQjBC,EAAgB,mCAAG,WAAMC,GAAN,uFACPJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,kBAC2BM,IAFpB,cACxBH,EADwB,yBAKvBA,EAASC,MALc,2CAAH,sDAQhBG,EAAY,mCAAG,WAAM/B,GAAN,uFACH0B,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BvB,EAA9B,oBAA4CwB,IADzC,cACpBG,EADoB,yBAGnBA,EAASC,MAHU,2CAAH,sDAMZI,EAAe,mCAAG,WAAOhC,EAAIiC,GAAX,uFACNP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDvB,EADC,YACKiC,EADL,oBACuBT,IAFjB,cACvBG,EADuB,yBAKtBA,EAASC,MALa,2CAAH,uD","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/Home.jsx","services/ApiService.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  gap: 16px;\n  padding: 10px 0;\n  list-style: none;\n`;\n\nexport const MovieWrapper = styled.li`\n  border: 1px solid grey;\n  border-radius: 4px;\n  background-color: #dfeeee;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2), 0 8px 10px rgba(0, 0, 0, 0.2);\n\n  :hover {\n    scale: 1.05;\n  }\n\n  > a {\n    text-decoration: none;\n  }\n\n  & img {\n    width: 197px;\n    height: 120px;\n    background-size: cover;\n  }\n`;\n\nexport const MovieName = styled.h5`\n  padding: 4px;\n  margin-top: 0;\n  margin-bottom: 0;\n  color: black;\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Container, MovieWrapper, MovieName } from './MoviesList.styled';\nimport defaultImage from 'images/default_img_2.jpg';\n\nconst MoviestList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <Container>\n      {movies.map(({ id, original_title, title, backdrop_path }) => {\n        return (\n          <MovieWrapper key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <img\n                src={\n                  backdrop_path\n                    ? `https://image.tmdb.org/t/p/w200/${backdrop_path}`\n                    : defaultImage\n                }\n                alt={original_title || title}\n              />\n              <MovieName>{original_title || title}</MovieName>\n            </Link>\n          </MovieWrapper>\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default MoviestList;\n\nMoviestList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      original_title: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      backdrop_path: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import { toast } from 'react-toastify';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Loader from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport * as API from 'services/ApiService';\n\nconst Home = () => {\n  const [movies, setMovies] = useState(null);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    getMovies();\n  }, []);\n\n  const getMovies = async () => {\n    setIsLoading(true);\n    try {\n      const moviesData = await API.getTrendingMovies();\n      if (moviesData.results.length === 0) {\n        return toast.error(\n          'Sorry, there are no images matching your search query. Please try again.'\n        );\n      }\n\n      setMovies(moviesData.results);\n    } catch (error) {\n      setError(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <main>\n      <h1>Trending today</h1>\n      {movies && <MoviesList movies={movies} />}\n      {isLoading && <Loader />}\n      {error &&\n        toast.error(\n          'Oops, an error occurred while loading the page. Please try reloading the page'\n        )}\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'f2fae09050301062329c7f99a1fba61d';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${KEY}`\n  );\n\n  return response.data;\n};\n\nexport const getMoviesByQuery = async query => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${query}`\n  );\n\n  return response.data;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const getMovieSubInfo = async (id, option) => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/${option}?api_key=${KEY}`\n  );\n\n  return response.data;\n};\n"],"names":["Container","styled","MovieWrapper","MovieName","movies","location","useLocation","map","id","original_title","title","backdrop_path","to","state","from","src","defaultImage","alt","useState","setMovies","error","setError","isLoading","setIsLoading","useEffect","getMovies","API","moviesData","results","length","toast","BASE_URL","KEY","getTrendingMovies","axios","response","data","getMoviesByQuery","query","getMovieById","getMovieSubInfo","option"],"sourceRoot":""}