{"version":3,"file":"static/js/342.f9e0ff96.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.jsx","pages/Movies.jsx","services/ApiService.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  gap: 16px;\n  padding: 10px 0;\n  list-style: none;\n`;\n\nexport const MovieWrapper = styled.li`\n  border: 1px solid grey;\n  border-radius: 4px;\n  background-color: #dfeeee;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2), 0 8px 10px rgba(0, 0, 0, 0.2);\n\n  :hover {\n    scale: 1.05;\n  }\n\n  > a {\n    text-decoration: none;\n  }\n\n  & img {\n    width: 197px;\n    height: 120px;\n    background-size: cover;\n  }\n`;\n\nexport const MovieName = styled.h5`\n  padding: 4px;\n  margin-top: 0;\n  margin-bottom: 0;\n  color: black;\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Container, MovieWrapper, MovieName } from './MoviesList.styled';\nimport defaultImage from 'images/default_img_2.jpg';\n\nconst MoviestList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <Container>\n      {movies.map(({ id, original_title, title, backdrop_path }) => {\n        return (\n          <MovieWrapper key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <img\n                src={\n                  backdrop_path\n                    ? `https://image.tmdb.org/t/p/w200/${backdrop_path}`\n                    : defaultImage\n                }\n                alt={original_title || title}\n              />\n              <MovieName>{original_title || title}</MovieName>\n            </Link>\n          </MovieWrapper>\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default MoviestList;\n\nMoviestList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      original_title: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      backdrop_path: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import styled from '@emotion/styled';\nimport { Form } from 'formik';\n\nexport const SearchbarEl = styled.header`\n  top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 1100;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  color: #fff;\n  background-color: #54c7a4;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const SearchForm = styled(Form)`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n  button {\n    display: inline-block;\n    width: 48px;\n    height: 48px;\n    border: 0;\n    background-size: 40%;\n    background-repeat: no-repeat;\n    background-position: center;\n    opacity: 0.6;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    cursor: pointer;\n    outline: none;\n    :hover {\n      opacity: 1;\n    }\n    svg {\n      width: 20px;\n      height: 20px;\n      fill: #217ba5;\n    }\n  }\n  input {\n    display: inline-block;\n    width: 95%;\n    height: 90%;\n    font: inherit;\n    font-size: 20px;\n    border: none;\n    outline: none;\n    padding-left: 4px;\n    padding-right: 4px;\n    margin-left: 10px;\n    ::placeholder {\n      font: inherit;\n      font-size: 18px;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Formik, Field } from 'formik';\nimport * as yup from 'yup';\nimport { SearchbarEl, SearchForm } from './Searchbar.styled';\nimport { FaSearch } from 'react-icons/fa';\n\nconst schema = yup.object().shape({\n  value: yup.string().required(),\n});\n\nconst Searchbar = ({ onSubmit }) => {\n  const handleSubmit = (values, { resetForm }) => {\n    const value = values.value.trim();\n\n    onSubmit(value);\n    resetForm();\n  };\n\n  return (\n    <SearchbarEl>\n      <Formik\n        initialValues={{ value: '' }}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <SearchForm autoComplete=\"off\" autoFocus>\n          <button type=\"submit\" aria-label=\"Search\">\n            <FaSearch />\n          </button>\n\n          <Field type=\"text\" name=\"value\" placeholder=\"Search movies\" />\n        </SearchForm>\n      </Formik>\n    </SearchbarEl>\n  );\n};\n\nexport default Searchbar;\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { toast } from 'react-toastify';\nimport { useEffect, useState } from 'react';\nimport MoviestList from 'components/MoviesList/MoviesList';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport Loader from 'components/Loader/Loader';\nimport * as API from 'services/ApiService';\nimport { useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState(null);\n  const [error, setError] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n\n    getMovies(query);\n  }, [query]);\n\n  const getMovies = async query => {\n    setIsLoading(true);\n    try {\n      const moviesData = await API.getMoviesByQuery(query);\n      if (moviesData.results.length === 0) {\n        return toast.error(\n          'Sorry, there are no movies matching your search query. Please try again.'\n        );\n      }\n\n      setMovies(moviesData.results);\n    } catch (error) {\n      setError(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSearch = searchQuery => {\n    if (searchQuery === '') {\n      toast.warn('The input field cannot be empty.');\n    }\n    if (query === searchQuery) {\n      return;\n    }\n\n    const nextParams = searchQuery !== '' ? { query: searchQuery } : {};\n\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <main>\n      <Searchbar onSubmit={handleSearch} />\n      {movies && <MoviestList movies={movies} />}\n      {isLoading && <Loader />}\n      {error &&\n        toast.error(\n          'Oops, an error occurred while loading the page. Please try reloading the page'\n        )}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'f2fae09050301062329c7f99a1fba61d';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${KEY}`\n  );\n\n  return response.data;\n};\n\nexport const getMoviesByQuery = async query => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${query}`\n  );\n\n  return response.data;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const getMovieSubInfo = async (id, option) => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/${option}?api_key=${KEY}`\n  );\n\n  return response.data;\n};\n"],"names":["Container","styled","MovieWrapper","MovieName","movies","location","useLocation","map","id","original_title","title","backdrop_path","to","state","from","src","defaultImage","alt","SearchbarEl","SearchForm","Form","schema","yup","shape","value","required","onSubmit","initialValues","validationSchema","values","resetForm","trim","autoComplete","autoFocus","type","name","placeholder","useState","setMovies","error","setError","useSearchParams","searchParams","setSearchParams","isLoading","setIsLoading","query","get","useEffect","getMovies","API","moviesData","results","length","toast","searchQuery","Loader","BASE_URL","KEY","getTrendingMovies","axios","response","data","getMoviesByQuery","getMovieById","getMovieSubInfo","option"],"sourceRoot":""}